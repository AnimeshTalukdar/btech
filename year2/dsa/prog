#include<iostream>
using namespace std;
typedef struct node{
int i,j,data;
node *next = NULL;
}node;
struct matrix {
node* head;
};
void insertmatrix(matrix &m,int n)
{
m.head= new node;
node *t= m.head;
node *oldt;
for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
{
int k;
cin>>k;
if(k!=0)
{
t->i = i;
t->j=j;
t->data =k;
t->next = new node;
oldt= t;
t=t->next;
}
}
}
oldt->next = NULL;
free(t);
}
matrix addmatrix(matrix n,matrix m)
{
matrix o;
o.head = new node;
node * t= o.head;
node* oldt;
node * t1= m.head;
node * t2= n.head;
while(t1!=NULL&&t2!=NULL)
{
if(t1->i<t2->i)
{
t->i=t1->i;
t->j=t1->j;
t->data=t1->data;
t1=t1->next;
t->next = new node;
oldt =t;
t= t->next;
}
else if(t1->i>t2->i)
{
t->i=t2->i;
t->j=t2->j;
t->data=t2->data;
t2=t2->next;
t->next = new node;
oldt =t;
t= t->next;
}
else if (t1->j<t2->j)
{
t->i=t1->i;
t->j=t1->j;
t->data=t1->data;
t1=t1->next;
t->next = new node;
oldt= t;
t= t->next;
}
else if (t1->j>t2->j)
{
t->i=t2->i;
t->j=t2->j;
t->data=t2->data;
t2=t2->next;
t->next = new node;
oldt =t;
t= t->next;
}
else
{
t->i=t2->i;
t->j=t2->j;
t->data=t2->data+t1->data;
t2=t2->next;
t1=t1->next;
t->next = new node;
oldt =t;
t= t->next;

}
}
while(t1!=NULL)
{
t->i=t1->i;
t->j=t1->j;
t->data=t1->data;
t1=t1->next;
t->next = new node;
oldt= t;
t= t->next;
}
while(t2!=NULL)
{
t->i=t2->i;
t->j=t2->j;
t->data=t2->data;
t2=t2->next;
t->next = new node;
oldt =t;
t= t->next;
}
oldt->next = NULL;
free (t);
return o;
}
void printmatrix(matrix m,int size)
{
node *t= m.head;
for(int i=0;i<size;i++)
{
for(int j=0;j<size;j++)
{
if(t!=NULL) {
if (t->i ==i&&t->j==j) {
printf("%2d ",t->data);
t=t->next;
}
else {
printf("%2d ",0);
}
}
else {
printf("%2d ",0);
}

}
cout<<endl;
}

}
int main()
{

int size;
matrix n;
cout<<"Enter size of matrices"<<endl;
cin>>size;
cout<<"Enter the first matrix"<<endl;
insertmatrix(n,size);
matrix m;
cout<<"Enter the second matrix"<<endl;
insertmatrix(m,size);
matrix sum = addmatrix(n,m);
cout<<"Added matrix:"<<endl;
printmatrix(sum,size);
cout<<endl;
}












#include<iostream>
using namespace std;
typedef struct node{
int i,j,data;
node *next = NULL;
}node;
struct matrix {
node* head;
};
void insertmatrix(matrix &m,int n)
{
m.head= new node;
node *t= m.head;
node *oldt;
for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
{
int k;
cin>>k;
if(k!=0)
{
t->i = i;
t->j=j;
t->data =k;
t->next = new node;
oldt= t;
t=t->next;
}
}
}
oldt->next = NULL;
free(t);
}
int main()
{
cout<<"Enter the size of the matrix"<<endl;
int size;
cin>>size;
matrix m;
cout<<"Enter the matrix"<<endl;
insertmatrix(m,size);
node * t = m.head;
cout<<"Enter the row of which you would like to find the number of elements of"<<endl;
int row;
cin>>row;
int count =0;
while(t != NULL)
{
if(t->i==row-1)
{
count++;
}
t=t->next;
}
cout<<"The number of elements in row "<<row <<" is "<<count<<endl;
return 0;
}














#include<iostream>
using namespace std;
typedef struct node{
int data;
struct node* next = NULL;
}node;
typedef struct largenumber{
struct node* digit = NULL;
}ln;
void insert(ln &n,char *s)
{
n.digit = new node;
node* t = n.digit;
int i= strlen(s);
while(i--)
{
t->data = s[i]-'0';
if(i!=0) {
t->next = new node;
t = t->next;
}
}
}
void add(ln&n,ln &m)
{
int hold = 0;
node *oldt1;
node *t1=n.digit;
node *t2=m.digit;
while(t1!=NULL&&t2!=NULL)
{
t1->data = t1->data+t2->data+hold;
hold = t1->data/10;
t1->data = t1->data%10;
oldt1= t1;
t1= t1->next;
t2=t2->next;
}
if(t1==NULL)
{
oldt1->next = new node;
t1= oldt1->next;
while(t2!=NULL)
{
t1->data = hold + t2->data;
hold=t1->data/10;
t1->data= t1->data%10;

t2=t2->next;
if(t2!=NULL)
{
t1->next= new node;
t1=t1->next;
}

}
}
}
void printnodes(node * n)
{
if(n->next == NULL)
cout<<n->data;
else
{
printnodes(n->next);
cout<<n->data;
}
}
void printlongn(ln n)
{
printnodes(n.digit);
}
int main(){
ln n,m;
cout<<"Enter the first long number: "<<endl;
char s1[100];
cin>>s1;
cout<<"Enter the second long number: "<<endl;
char s2[100];
cin>>s2;
insert(n,s1);
insert(m,s2);
cout<<"Added long number:"<<endl;
add(n,m);
printlongn(n);
return 0;
}
